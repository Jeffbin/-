/*
 * 问题描述：
 * 提交状态：  AC 
 *
 * AC 结果： MEMORY:292K TIME:0MS
 *
 * 解题方法1：找出起点坐标，dfs（左）：以第一人称左转开始，能左转就左转，不能就按以↑→↓顺时针走，直到能走，每次走完继续以第一人称左转
 *				DFS（右，同上）
				BFS：用一个队列依次扩展节点，直到到达终点结束，不需要考虑第几人称
 *
 * 解题方法2 （可选）：
 *
 * 出错次数：1
 *
 * 错误原因 （可选）：超时
					1.一开始没看懂题目，忽略了重要信息贴着墙走，一开始的走法是自己找规律得出，虽然正确但思路有点错
 *					2.按上帝视角来看待地图走向了，每一次都选择上帝视角右边为开始遍历，导致超时，忽略了应该是用第一人称来标榜当前方向，所以每次移动后
 *					的右边都是不一样的
 *
 * 心得体会 （可选）：要仔细审题，要画图并且代入情景，否则容易出错误
 */


#include<iostream>
#include <queue>

using namespace std;
struct point
{
	int x;
	int y;
	int step;
};
queue<point>r;//申请队列
char map[100][100];

bool used[100][100],flag=0;
int w, h;
int dx[4] = { 0,1,0,-1 };//顺时针右 下左上 
int dy[4] = { 1,0,-1,0 };
int dir[][2] = { {0,-1},{-1,0},{0,1},{1,0} };//←↑→↓
int dir1[][2] = { {0,1},{-1,0},{0,-1},{1,0} };//→↑←↓
void left(int x, int y, int d, int step)
{
	if (map[x][y] == 'E')
	{
		cout << step << ' ';
		flag = 1;
	}
	int tx, ty;
	for (int i = d; i < 4; i++)                                    //要从指定方向开始循环，刚开始时可以以任意方向
	{
		if (flag) break;
		tx = x + dir[i][0];
		ty = y + dir[i][1];
		if (map[tx][ty] == '.' || map[tx][ty] == 'E' || map[tx][ty] == 'S')
		{
			d = (i + 3) % 4;                                      //指定方向
			left(tx, ty, d, step + 1);
		}
		if (i == 3) i -= 4;                                       //防止i溢出
	}
}
void right(int x, int y, int d, int step)
{
	if (map[x][y] == 'E') 
	{
		cout << step << ' ';
		flag = 1;
	}
	int tx, ty;
	for (int i = d; i < 4; i++)                                    //要从指定方向开始循环，刚开始时可以以任意方向
	{
		if (flag) break;
		tx = x + dir1[i][0];
		ty = y + dir1[i][1];
		if (map[tx][ty] == '.' || map[tx][ty] == 'E' || map[tx][ty] == 'S')
		{
			d = (i + 3) % 4;                                         //指定方向
			right(tx, ty, d, step + 1);
		}
		if (i == 3)
		{
			i -= 4;
		}//防止i溢出
	}
}
void bfs(int g,int p)
{
	point start;
	start.x = g;
	start.y = p;
	start.step = 1;
	r.push(start);//入队
	used[g][p] = 1;
	int flag = 1;
	while (!r.empty())
	{
		int x = r.front().x;
		int y = r.front().y;
		if (map[x][y] == 'E')
		{
			flag = 1;
			cout << r.front().step << '\n';
		}
		for (int k = 0; k <= 3; k++)
		{
			int tx, ty;
			tx = x + dx[k];
			ty = y + dy[k];
			if (map[tx][ty] == '.' && used[tx][ty] == 0|| map[tx][ty] == 'E' && used[tx][ty] == 0)
			{
				//入队
				point temp;
				temp.x = tx;
				temp.y = ty;
				temp.step = r.front().step + 1;
				r.push(temp);
				used[tx][ty] = 1;
			}
		}
		r.pop();
	}

}

int main()
{
	int n;
	cin >> n;
	for (int j = 0; j < n; j++)
	{
		memset(used, 0, sizeof(used));
		memset(map, 0, sizeof(map));
		cin >> w >> h;
		for (int k = 0; k < h; k++)
		{
			cin >> map[k];
		}
		int i, m,g,p;
		for (i = 0; i < h; i++)
		{
			for (m=0; m < w; m++)
			{
				if (map[i][m] == 'S')
				{
					g = i; p = m;
					break;
				}
			}
			
		}
	/*	used[g][p] = 1;
		dfsleft(g, p);
		cout << ans << endl;
		*/
		
		//ans = 1;//初始化
		//outl = 1;//初始化
		//memset(used, 0, sizeof(used));
		//used[g][p] = 1;
		//dfsright(g, p);
		
		//cout << cnt << endl;
		//cnt = 1;//初始化
		//outr = 1;//初始化
		//memset(used, 0, sizeof(used));
		flag = 0;
		left(g, p, 0, 1);
		flag = 0;
		right(g, p, 0, 1);
		
		/*flag = 0;
		right(g, p, 0, 1);*/
		bfs(g, p);
	}
}

/*
7
8 8
########
#......#
#.####.#
#.####.#
#.####.#
#.####.#
#...#..#
#S#E####
9 5
#########
#.#.#.#.#
S.......E
#.#.#.#.#
#########
3 3
###
S.#
#E#
40 40
######################################E#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#......................................#
#S######################################
40 40
########################################
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#..#
#......................................#
#S#E####################################
40 40
#E######################################
S......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
######################################.#
#......................................#
#......................................#
########################################
11 11
#S#########
#.........#
#.#.#.#.#.#
#...#...#.#
#####.###.#
#...#.#...#
#.#...#.#.#
#..##.#...#
#.#.#.###.#
#...#.#...#
#####E#####


*/